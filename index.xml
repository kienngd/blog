<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on K5d</title>
    <link>https://kienngd.98t1.net/</link>
    <description>Recent content in Home on K5d</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© 2020 Copyright</copyright>
    <lastBuildDate>Thu, 26 Nov 2020 08:36:20 +0700</lastBuildDate><atom:link href="https://kienngd.98t1.net/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Apiato</title>
      <link>https://kienngd.98t1.net/tutorials/apiato/</link>
      <pubDate>Thu, 26 Nov 2020 08:36:20 +0700</pubDate>
      
      <guid>https://kienngd.98t1.net/tutorials/apiato/</guid>
      <description>Home page: http://docs.apiato.io/
Create project using composer from latest stable
composer create-project apiato/apiato apiato9 Then edit the .env file.
Migrate database
php artisan migrate Create admin user, some permissions, roles
php artisan db:seed Default account is: admin@admin.com / admin.
Add all current permissions to admin role.
php artisan apiato:permissions:toRole admin Install OAuth 2.0
php artisan passport:install Then edit file .env update CLIENT_WEB_ADMIN_ID, CLIENT_WEB_ADMIN_SECRET with the new created value.
Install ApiDocJs</description>
    </item>
    
    <item>
      <title>Use UUID as primary key of Laravel Eloquent ORM</title>
      <link>https://kienngd.98t1.net/howto/how_to_use_uuid_as_id_laravel/</link>
      <pubDate>Mon, 02 Nov 2020 15:37:11 +0700</pubDate>
      
      <guid>https://kienngd.98t1.net/howto/how_to_use_uuid_as_id_laravel/</guid>
      <description>Install package using composer:
composer require goldspecdigital/laravel-eloquent-uuid:^7.0 Inside migration file.
// Replace this $table-&amp;gt;increments(&amp;#39;id&amp;#39;); // By this $table-&amp;gt;uuid(&amp;#39;id&amp;#39;)-&amp;gt;primary(); Inside model file
use GoldSpecDigital\LaravelEloquentUUID\Database\Eloquent\Uuid; ... class MyModel extends Model { use Uuid; protected $keyType = &amp;#39;string&amp;#39;; public $incrementing = false; protected $guarded = []; } </description>
    </item>
    
    <item>
      <title>Working with openstack api using curl</title>
      <link>https://kienngd.98t1.net/notes/working_with_openstack_api_using_curl/</link>
      <pubDate>Thu, 29 Oct 2020 09:26:59 +0700</pubDate>
      
      <guid>https://kienngd.98t1.net/notes/working_with_openstack_api_using_curl/</guid>
      <description>Get token curl -s -i -H &amp;#34;Content-Type: application/json&amp;#34; -d &amp;#39; { &amp;#34;auth&amp;#34;: { &amp;#34;identity&amp;#34;: { &amp;#34;methods&amp;#34;: [ &amp;#34;password&amp;#34; ], &amp;#34;password&amp;#34;: { &amp;#34;user&amp;#34;: { &amp;#34;name&amp;#34;: &amp;#34;{USERNAME}&amp;#34;, &amp;#34;domain&amp;#34;: { &amp;#34;id&amp;#34;: &amp;#34;{DOMAIN_ID}&amp;#34; }, &amp;#34;password&amp;#34;: &amp;#34;{PASSWORD}&amp;#34; } } }, &amp;#34;scope&amp;#34;: { &amp;#34;project&amp;#34;: { &amp;#34;id&amp;#34;: &amp;#34;{PROJECT_ID}&amp;#34; } } } }&amp;#39; &amp;#34;https://{BASE URL}:5000/v3/auth/tokens&amp;#34; | grep &amp;#34;X-Subject-Token:&amp;#34; Default keystone port is 5000
By default, this token will be expired after 6 hours.
Export token API_TOKEN=&amp;quot;{TOKEN}&amp;quot;
Get domains curl -s -H &amp;#34;X-Auth-Token: $API_TOKEN&amp;#34; &amp;#34;https://{BASE URL}:5000/v3/domains&amp;#34; | jq &amp;#39;.</description>
    </item>
    
    <item>
      <title>Working With Influxdb Data Using PhpClient</title>
      <link>https://kienngd.98t1.net/notes/working_with_influxdb_data_using_phpclient/</link>
      <pubDate>Tue, 20 Oct 2020 10:02:52 +0700</pubDate>
      
      <guid>https://kienngd.98t1.net/notes/working_with_influxdb_data_using_phpclient/</guid>
      <description>document: https://github.com/influxdata/influxdb-php
Install via composer composer require influxdb/influxdb-php Create client object $client = new InfluxDB\Client($host, $port); // directly get the database object $database = InfluxDB\Client::fromDSN(sprintf(&amp;#39;influxdb://user:pass@%s:%s/%s&amp;#39;, $host, $port, $dbname)); // Fetch the database using a 5 second time out $database = InfluxDB\Client::fromDSN(sprintf(&amp;#39;influxdb://user:pass@%s:%s/%s&amp;#39;, $host, $port, $dbname), 5); // get the client to retrieve other databases $client = $database-&amp;gt;getClient(); Reading data // fetch the database $database = $client-&amp;gt;selectDB(&amp;#39;influx_test_db&amp;#39;); // executing a query will yield a resultset object $result = $database-&amp;gt;query(&amp;#39;select * from test_metric LIMIT 5&amp;#39;); // get the points from the resultset yields an array $points = $result-&amp;gt;getPoints(); Use the queryBuilder object // retrieve points with the query builder $result = $database-&amp;gt;getQueryBuilder() -&amp;gt;select(&amp;#39;cpucount&amp;#39;) -&amp;gt;from(&amp;#39;test_metric&amp;#39;) -&amp;gt;limit(2) -&amp;gt;offset(2) -&amp;gt;getResultSet() -&amp;gt;getPoints(); // get the query from the QueryBuilder $query = $database-&amp;gt;getQueryBuilder() -&amp;gt;select(&amp;#39;cpucount&amp;#39;) -&amp;gt;from(&amp;#39;test_metric&amp;#39;) -&amp;gt;where([&amp;#34;region = &amp;#39;us-west&amp;#39;&amp;#34;]) -&amp;gt;getQuery(); Get the last executed query from the client // use the getLastQuery() method $lastQuery = $client-&amp;gt;getLastQuery(); // or access the static variable directly: $lastQuery = Client::lastQuery; Writting data // create an array of points $points = array( new Point( &amp;#39;Measurement_Name&amp;#39;, // name of the measurement 	0.</description>
    </item>
    
    <item>
      <title>Working_with_influxdb_data_using_api</title>
      <link>https://kienngd.98t1.net/notes/working_with_influxdb_data_using_api/</link>
      <pubDate>Tue, 20 Oct 2020 10:02:45 +0700</pubDate>
      
      <guid>https://kienngd.98t1.net/notes/working_with_influxdb_data_using_api/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Working_with_influxdb_data_using_influx</title>
      <link>https://kienngd.98t1.net/notes/working_with_influxdb_data_using_influx/</link>
      <pubDate>Tue, 20 Oct 2020 10:02:33 +0700</pubDate>
      
      <guid>https://kienngd.98t1.net/notes/working_with_influxdb_data_using_influx/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Influxdb Docker With Laradock</title>
      <link>https://kienngd.98t1.net/notes/influxdb_docker_with_laradock/</link>
      <pubDate>Tue, 20 Oct 2020 09:09:57 +0700</pubDate>
      
      <guid>https://kienngd.98t1.net/notes/influxdb_docker_with_laradock/</guid>
      <description>In this post we will see how to run influxdb docker container using laradock. Have fun.
InfluxDB docker document: https://hub.docker.com/_/influxdb
Edit laradock .env file:
Add these lines at the end of file
### INFLUXDB ################################################## # influxdb version, accept values: 1.7, 1.7.10, 1.8, 1.8.3, latest INFLUXDB_VERSION=1.8 INFLUXDB_HTTP_PORT=8086 Edit docker-composer.yml file. Please remember to backup it first :).
Add these lines at the end of file
### influxdb #################################################### influxdb: container_name: influxdb hostname: influxdb image: influxdb:${INFLUXDB_VERSION} ports: - &amp;#34;${INFLUXDB_HTTP_PORT}:8086&amp;#34; networks: - backend volumes: - ${DATA_PATH_HOST}/influxdb/var/lib/influxdb:/var/lib/influxdb Start influxdb container</description>
    </item>
    
    <item>
      <title>React Admin P1</title>
      <link>https://kienngd.98t1.net/tutorials/react-admin-p1/</link>
      <pubDate>Sat, 17 Oct 2020 23:17:57 +0700</pubDate>
      
      <guid>https://kienngd.98t1.net/tutorials/react-admin-p1/</guid>
      <description>React-Admin tutorial notes Create new project and install packages
yarn create react-app test-admin cd test-admin/ yarn add react-admin ra-data-json-server prop-types Edit file src/App.js
import * as React from &amp;#34;react&amp;#34;; import { Admin, Resource } from &amp;#39;react-admin&amp;#39;; import jsonServerProvider from &amp;#39;ra-data-json-server&amp;#39;; import { ListGuesser } from &amp;#39;react-admin&amp;#39;; const App = () =&amp;gt; { const dataProvider = jsonServerProvider(&amp;#39;https://jsonplaceholder.typicode.com&amp;#39;); return( &amp;lt;Admin dataProvider={dataProvider}&amp;gt; &amp;lt;Resource name=&amp;#34;users&amp;#34; list={ListGuesser} /&amp;gt; &amp;lt;/Admin&amp;gt; ); } export default App; Add dashboard page  Create dashboard component Set &amp;lt;Admin dashboard={ Dashboard } &amp;hellip;&amp;gt;  Customizing menu icon  Import Icon &amp;lt;Resource icon={ ICON } &amp;hellip;&amp;gt;  Adding login page  Create src/Providers/authProvider (Example code: &amp;hellip;) &amp;lt;Admin authProvider={ authProvider } &amp;hellip;&amp;gt;  Check screen size const isSmall = useMediaQuery(theme =&amp;gt; theme.</description>
    </item>
    
    <item>
      <title>Some git commands</title>
      <link>https://kienngd.98t1.net/notes/some_git_commands/</link>
      <pubDate>Fri, 16 Oct 2020 11:02:20 +0700</pubDate>
      
      <guid>https://kienngd.98t1.net/notes/some_git_commands/</guid>
      <description>This is some git commands that I usually use.
Clone a repository
git clone &amp;lt;URL&amp;gt; [&amp;lt;DEST Directory&amp;gt;] Clone from specific branch
git clone --branch &amp;lt;BRANHCH NAME&amp;gt; &amp;lt;URL&amp;gt; [&amp;lt;DEST Directory&amp;gt;] Pull code from remote master branch and merge to current banch
git pull origin master Push code from local DEV branch to remote MASTER branch
git push origin dev:master Create local branch
git checkout -b &amp;lt;BRANHCH NAME&amp;gt; Switch local branch
git checkout &amp;lt;BRANHCH NAME&amp;gt; List all branch</description>
    </item>
    
    <item>
      <title>How to check my ip</title>
      <link>https://kienngd.98t1.net/howto/how_to_check_my_ip/</link>
      <pubDate>Fri, 16 Oct 2020 10:54:04 +0700</pubDate>
      
      <guid>https://kienngd.98t1.net/howto/how_to_check_my_ip/</guid>
      <description>Hello, sometimes you need to know what is my IP. In this post we will learn one way to check public IP. Have fun!
Open your browser to access this link: https://api.myip.com/. You can see something like this: {&amp;ldquo;ip&amp;rdquo;:&amp;ldquo;115.75.212.27&amp;rdquo;,&amp;ldquo;country&amp;rdquo;:&amp;ldquo;Viet Nam&amp;rdquo;,&amp;ldquo;cc&amp;rdquo;:&amp;ldquo;VN&amp;rdquo;} so your IP is: 115.75.212.27.
Bonus: You can use curl command to get data too.</description>
    </item>
    
    <item>
      <title>Phpdoc docblock</title>
      <link>https://kienngd.98t1.net/notes/phpdoc_docblock/</link>
      <pubDate>Thu, 15 Oct 2020 11:08:52 +0700</pubDate>
      
      <guid>https://kienngd.98t1.net/notes/phpdoc_docblock/</guid>
      <description>/** This is a single line DocComment. */ /** * This is a multi-line DocComment. */ /** * This is a summary * * This is a description */ /** * This is a summary. * This is a description */ Tags example: @api, @author, @param, @return&amp;hellip;
&amp;lt;?php /** * I belong to a file. File summary * * File description. */ /** * I belong to a class. Class summary * * Class description * @author .</description>
    </item>
    
    <item>
      <title>Create document using phpdoc</title>
      <link>https://kienngd.98t1.net/notes/create_document_using_phpdoc/</link>
      <pubDate>Thu, 15 Oct 2020 10:49:07 +0700</pubDate>
      
      <guid>https://kienngd.98t1.net/notes/create_document_using_phpdoc/</guid>
      <description>Hello. In this post, we will learn how to build document using phpdoc. Have fun!
  Install phpdoc
Using composer
composer require &amp;#34;phpdocumentor/phpdocumentor:2.*&amp;#34; Then run command
vendor/bin/phpdoc ... Manual: Download file phar from: Github releases
Then run command
php phpDocumentor.phar ...   Some simple commands
vendor/bin/phpdoc template:list vendor/bin/phpdoc run -d SRC -t DEST --template=TEMPLATE_NAME   &amp;hellip;
  </description>
    </item>
    
    <item>
      <title>How to install VIM plugins</title>
      <link>https://kienngd.98t1.net/howto/how_to_install_vim_plugins/</link>
      <pubDate>Wed, 14 Oct 2020 09:08:18 +0700</pubDate>
      
      <guid>https://kienngd.98t1.net/howto/how_to_install_vim_plugins/</guid>
      <description>Hello, today we will to learn 2 of many ways to install and use VIM plugins. I use Ubuntu 20.04 to test. Have fun!
If you want to install plugin named nerdtree,
1st way: Copy plugin files to: ~/.vim/pack/vendor/start and they will be load when you launch VIM
Example:
cp -r nerdtree ~/.vim/pack/vendor/start/ Then inside VIM, you can use command: :NERDTree
2nd way: Copy plugin files to: ~/.vim/pack/vendor/opt and they will be not load until you use command packadd to load it.</description>
    </item>
    
    <item>
      <title>How to disable wifi power save Ubuntu 20.04</title>
      <link>https://kienngd.98t1.net/howto/how_to_disable_wifi_power_save_ubuntu_20.04/</link>
      <pubDate>Sun, 11 Oct 2020 23:15:36 +0700</pubDate>
      
      <guid>https://kienngd.98t1.net/howto/how_to_disable_wifi_power_save_ubuntu_20.04/</guid>
      <description>Hello, today I&amp;rsquo;ve installed new Ubuntu 20.04. Then I get the wifi problem. When system start, the wifi works fine. But a few moment later, it was dropped so I cannot connect to the internet. I disable wifi, then enable wifi, it works fine for some minutes and fall into problem again.
I see this link and try to edit file /etc/NetworkManager/conf.d/default-wifi-powersave-on.conf change wifi.powersave from 3 (enable power save) to 2 (disable power save).</description>
    </item>
    
    <item>
      <title>How to create a linux service</title>
      <link>https://kienngd.98t1.net/howto/how_to_create_linux_service/</link>
      <pubDate>Sat, 10 Oct 2020 08:56:09 +0700</pubDate>
      
      <guid>https://kienngd.98t1.net/howto/how_to_create_linux_service/</guid>
      <description>Hi, today we will learn how to create a linux service. I use Ubuntu 20.04 to test. Have fun!
Step 1: Create new service file /etc/systemd/system/test_service.service Example file content:
[Unit] Description=Demo test service After=network.target StartLimitIntervalSec=0 [Service] Type=simple Restart=always RestartSec=1 User=**root** ExecStart=**COMMAND TO EXECUTE** [Install] WantedBy=multi-user.target You can see the full service defination here: Will be update
Step 2: Start service sudo systemctl daemon-reload sudo systemctl start test_service.service Step 3: Enable service (so service will start with OS) sudo systemctl enable test_service.</description>
    </item>
    
    <item>
      <title>How to working with JSON in GoLang</title>
      <link>https://kienngd.98t1.net/howto/working_with_json_in_golang/</link>
      <pubDate>Thu, 08 Oct 2020 13:34:54 +0700</pubDate>
      
      <guid>https://kienngd.98t1.net/howto/working_with_json_in_golang/</guid>
      <description>In this post, we will learn how to parse json data in GoLang. Have fun!
Working with structed data
// Import package import ( &amp;#34;encoding/json&amp;#34; ) type Bird struct { Species string Description string } func main() { jsonString := `{	&amp;#34;species&amp;#34;: &amp;#34;pigeon&amp;#34;, &amp;#34;description&amp;#34;: &amp;#34;likes to perch on rocks likes to perch on rocks likes to perch on rocks&amp;#34; }` var bird Bird err := json.Unmarshal([]byte(jsonString), &amp;amp;bird) if err != nill { // json string is invalid.</description>
    </item>
    
    <item>
      <title>How to build a free blog</title>
      <link>https://kienngd.98t1.net/howto/how_to_build_free_blog/</link>
      <pubDate>Thu, 08 Oct 2020 10:34:44 +0700</pubDate>
      
      <guid>https://kienngd.98t1.net/howto/how_to_build_free_blog/</guid>
      <description>Hello, in this post will learn how to build a free personal blog using Hugo + Github page. Have fun!
Step 1: Install hugo.
Step 2: Create a new site.
Step 3: Setup your hugo theme.
Step 4: Create new post.
hugo new &amp;lt;POST TYPE&amp;gt;/&amp;lt;POST_TITLE.md&amp;gt; Then edit the new file.
Step 5: Test your site in your PC and build site.
Start hugo server
hugo server Default port is 1313 so you can access http://localhost:1313 or http://:1313</description>
    </item>
    
    <item>
      <title>How does computer networking work?</title>
      <link>https://kienngd.98t1.net/knowlege/how_does_networking_work/</link>
      <pubDate>Thu, 08 Oct 2020 09:23:54 +0700</pubDate>
      
      <guid>https://kienngd.98t1.net/knowlege/how_does_networking_work/</guid>
      <description>This post will explain how does computer networking work.
Have fun!</description>
    </item>
    
    <item>
      <title>About Hugo</title>
      <link>https://kienngd.98t1.net/about/</link>
      <pubDate>Thu, 08 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kienngd.98t1.net/about/</guid>
      <description>Hugo is the worldâs fastest framework for building websites. It is written in Go.
It makes use of a variety of open source projects including:
 https://github.com/russross/blackfriday https://github.com/alecthomas/chroma https://github.com/muesli/smartcrop https://github.com/spf13/cobra https://github.com/spf13/viper  Learn more and contribute on GitHub.</description>
    </item>
    
  </channel>
</rss>
