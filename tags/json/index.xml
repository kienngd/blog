<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JSON on K5d</title>
    <link>https://kienngd.98t1.net/tags/json/</link>
    <description>Recent content in JSON on K5d</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© 2020 Copyright</copyright>
    <lastBuildDate>Thu, 08 Oct 2020 13:34:54 +0700</lastBuildDate><atom:link href="https://kienngd.98t1.net/tags/json/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to working with JSON in GoLang</title>
      <link>https://kienngd.98t1.net/howto/working_with_json_in_golang/</link>
      <pubDate>Thu, 08 Oct 2020 13:34:54 +0700</pubDate>
      
      <guid>https://kienngd.98t1.net/howto/working_with_json_in_golang/</guid>
      <description>In this post, we will learn how to parse json data in GoLang. Have fun!
Working with structed data
// Import package import ( &amp;#34;encoding/json&amp;#34; ) type Bird struct { Species string Description string } func main() { jsonString := `{	&amp;#34;species&amp;#34;: &amp;#34;pigeon&amp;#34;, &amp;#34;description&amp;#34;: &amp;#34;likes to perch on rocks likes to perch on rocks likes to perch on rocks&amp;#34; }` var bird Bird err := json.Unmarshal([]byte(jsonString), &amp;amp;bird) if err != nill { // json string is invalid.</description>
    </item>
    
  </channel>
</rss>
